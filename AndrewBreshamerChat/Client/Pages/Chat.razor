@page "/chat"
@using System
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable 
@* Provides a mechanism for releasing unmanaged resources asynchronously. *@
@* Providing such a mechanism enables the consumer to perform resource-intensive 
dispose operations without blocking the main thread of a GUI application for a long time *@

<h3>Chat</h3>

<div class="form-group">
    <label>
        Name: 
        <input @bind="userInput" @onblur=@(e => tempName = "userInput") />
    </label>
    
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" @onfocus="DisplayNameTyping" @onblur="HideFocus" /> 
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection; //create instance of HubConnection named hubConnection
    private List<string> messages = new List<string>();
    private string userInput;
    private static string tempName; //create tempName to be inserted into 'userInput' for early use before button is pressed
    private string messageInput;

    protected override async Task OnInitializedAsync()
    @* TAP (Task-based asynchronous pattern) uses a single method to represent the initiation and 
    completion of an asynchronous operation. This contrasts with both the APM (Asynchronous Programming 
    Model) and the EAP (Event-based Asynchronous Pattern) *@
    //invoked when the component is initialized after having recieved its initial parameters (i dont think there are any in here)
    //asynchronous method executed when the component is initialized (delcared at line 36)
    {
        hubConnection = new HubConnectionBuilder() 
            //constructor in HubConnectionBuilder class from Microsoft.AspNetCore.SignalR.Client
            //A builder for configuring HubConnection instances.
            .WithUrl(NavigationManager.ToAbsoluteUri("/chat")) 
            //Configures the HubConnection class to use HTTP-based transports to connect to the specified URL.
            //returns the same instance of IHubConnectionBuilder, A builder abstraction for configuring HubConnection instances
            //create instance routed to "/chat" page
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) => 
        //'this HubConnection hubConnection' implicitly used?
        //'Registers a handler that will be invoked when the hub method with the specified method name is invoked.'
        //lambda method used as handler 
        //"ReceiveMessage" = The name of the hub method to define.
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg); //add encoded message to List<> messages
            StateHasChanged(); //
        });

        await hubConnection.StartAsync();
        //Before hub methods can be invoked the connection must be started using StartAsync()
        //starts connection to the server
        //'The await operator suspends evaluation of the enclosing async method until the 
        //asynchronous operation represented by its operand completes' = methods that rely 
        //on hubConnection will wait until .StartAsync() is complete?
    }

    private async Task DisplayNameTyping() 
    { 
        await Task.Delay(400); 
        //'await' suspends evalutaion of method until the async opeartion is called
        //add short delay to Task, "DisplayNameTypinc()" by using keyword 'Task'
        await hubConnection.SendAsync("SendMessage", userInput, "is typing...");
    }
    private void HideFocus() 
    {
        messages.RemoveAt(messages.Count -1);
    }

    async Task Send() => //sinlge operation with no return value
        await hubConnection.SendAsync("SendMessage", userInput, messageInput);

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
    @* if(!string.IsNullOrWhiteSpace(userInput)) *@
}