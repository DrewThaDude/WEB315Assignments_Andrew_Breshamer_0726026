@page "/grocerystore" 

<h3>GroceryStore</h3>

<ul>
    @foreach (var isle in isleList) {
        <li>@isle.isleName
            <ul>
                @foreach (var item in isleItems) {
                <li>@item.itemName</li>
            }
            </ul>
        </li> 
    }
</ul>

<input placeholder="Add isle" @bind="newIsle" />
<button @onclick="addIsle">Add Isle</button>

@functions
{
    public class GroceryIsle 
    //: IEnumerable<FoodItem>
    {
        public string isleName { get; set; }
        public int isleNumber { get; set; }

        public List<FoodItem> isleItems { get; set; }

        @* IEnumerator<FoodItem> IEnumerable<FoodItem>.GetEnumerator()
        {
            throw new NotImplementedException();
        }
        IEnumerator IEnumerable<FoodItem>.GetEnumerator()
        {
            throw new NotImplementedException();
        } *@

        /* public GroceryIsle()
        {
            
        } */
    }
}

@code {
    private string newIsle;

    private List<FoodItem> childList1 = new List<FoodItem>()
    { 
        new FoodItem
        { 
            itemName = "apple"
        }
    };

    private List<GroceryIsle> isleList = new List<GroceryIsle>() 
    {
        new GroceryIsle() 
        { 
            isleName = "produce", isleItems = childList1, //ilseItems points to childList1.. doesn't copy contents. idk
        },
        new GroceryIsle() 
        {
            isleName = "breakfast"
        },
        new GroceryIsle() 
        {
            isleName = "beverage"
        }
    }; 

    @* public IEnumerable<FoodItem> GetFoodItems()
        {
            return childList;
        } *@
    
    private void addIsle() 
    {
        if(!string.IsNullOrWhiteSpace(newIsle)) 
        {
            isleList.Add(new GroceryIsle { isleName = newIsle });
            newIsle = string.Empty;
        }
    }

}